syntax = "proto3";

package grpcproto;

import "geometry.proto";
import "common.proto";
import "metadata.proto";

message registerTripRequest {
    int64 carID = 1;
    int64 beginLeaveTime = 2;
    int64 endLeaveTime = 3;
    point from = 4;
    point to = 5;
    int32 maxDistance = 6;
    int64 feeEachKm = 7;
    int32 seat = 8;
}

message findTripRequest {
    int64 beginLeaveTime = 1;
    int64 endLeaveTime = 2;
    point from = 3;
    point to = 4;
    int32 option = 5;
}

message carObject {
    int32 id = 1;
    string licensePlate = 2;
    string color = 3;
    string model = 4;
}

message listCarResponse {
    repeated carObject cars = 1;
}

message takeTripRequest {
    int32 driverTripID = 1;
    int64 beginLeaveTime = 2;
    int64 endLeaveTime = 3;
    point from = 4;
    point to = 5;
    int32 seat = 6;
}

message userTrip {
    int32 id = 1;
    int64 beginLeaveTime = 2;
    int64 endLeaveTime = 3;
    string from = 4;
    string to = 5;
    int32 state = 6;
    userProfile driver = 7;
    carObject car = 8;
    int64 price = 9;
    float distance = 10;
    userProfile user = 11;
}

message listUserTripResponse {
    repeated userTrip userTrip = 1;
}

message deleteCarRequest {
    repeated int32 ids = 1;
}

message driverTrip {
    repeated userTrip userTrips = 1;
    int64 beginLeaveTime = 2;
    int64 endLeaveTime = 3;
    string from = 4;
    string to = 5;
    int32 state = 6;
    int32 totalSeat = 7;
    int32 reamaingSeat = 8;
    carObject car = 9;
    int32 priceEachKm = 10;
}

message listDriverTripResponse {
    repeated driverTrip trips = 1;
}

message listDriverTripRequest {
    int32 state = 1;
    int32 limit = 2;
}
service car {
    // driver
    rpc registerTrip(registerTripRequest) returns (grpcproto.bool);
    rpc registerCar(carObject) returns (grpcproto.bool);
    rpc listMyCar(int) returns (listCarResponse);
    rpc updateCar (carObject) returns (grpcproto.bool);
    rpc deleteCar (deleteCarRequest) returns (grpcproto.bool);
    rpc listDriverTrip(listDriverTripRequest) returns (listDriverTripResponse);
    // user
    rpc findTrip(findTripRequest) returns (jsonResponse);
    rpc takeTrip(takeTripRequest) returns (grpcproto.bool);
    rpc listUserTrip(int) returns (listUserTripResponse);

}